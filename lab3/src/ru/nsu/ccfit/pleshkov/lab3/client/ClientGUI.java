package ru.nsu.ccfit.pleshkov.lab3.client;

import ru.nsu.ccfit.pleshkov.lab3.*;

import javax.swing.*;
import javax.swing.text.BadLocationException;
import javax.swing.text.SimpleAttributeSet;
import javax.swing.text.StyleConstants;
import javax.swing.text.StyledDocument;
import java.awt.*;
import java.awt.event.*;
import java.io.*;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.concurrent.ArrayBlockingQueue;
import java.util.concurrent.BlockingQueue;

public class ClientGUI extends JFrame implements ClientInterface {
    private JPanel Panel;
    private JTextArea currentMessage;
    private JButton logoutButton;
    private JTextPane previousMessages;
    private JTextPane userlist;
    private JLabel loginText;
    private LogoutButton logoutClick;
    private MessageForm messageForm;
    private Messages messages;
    private LoginDialog dialog;
    private Userlist list;
    private SimpleObserver listObserver;
    private SimpleObserver fin;
    private boolean loggedOut = false;
    private boolean failedLoggedOut = false;
    private boolean loggedIn = false;
    private boolean listed = false;
    final private Object loggedOutLock = new Object();

    static final private String WINDOW_NAME = "Chat";

    private BlockingQueue<String> sendedMessages = new ArrayBlockingQueue<>(10);

    ClientGUI() {
        setContentPane(Panel);
        setBounds(400, 200, 600, 500);
        logoutButton.setText("Logout");
        setTitle(WINDOW_NAME);
        messageForm = new MessageForm(currentMessage);
        logoutClick = new LogoutButton(logoutButton);
        messages = new Messages(previousMessages);
        list = new Userlist(userlist);
        setDefaultCloseOperation(DO_NOTHING_ON_CLOSE);
        addWindowListener(new WindowAdapter() {
            public void windowClosing(WindowEvent e) {
                logoutClick.notifySimpleObservers();
            }
        });
    }

    void init(Observer loginObserver, Observer messagesObserver,
              SimpleObserver logoutObserver, SimpleObserver listObserver,
              SimpleObserver fin, SimpleObserver terminate) {
        this.fin = fin;
        messageForm.clearObservers();
        messageForm.addObserver((String message) -> SwingUtilities.invokeLater(() -> messagesObserver.update(message)));
        dialog = new LoginDialog(() -> {
            terminate.update();
            this.dispose();
        });
        dialog.addObserver((String message) -> SwingUtilities.invokeLater(() -> {
            loginObserver.update(message);
            loginText.setText(message);
        }));
        logoutClick.clearObservers();
        logoutClick.addSimpleObserver(logoutObserver);
        this.listObserver = listObserver;
    }

    void forceLogin(String name) {
        dialog.forceLogin(name);
    }

    void startMessages() {
        loggedIn = true;
        loggedOut = false;
        dialog.dispose();
        listed = false;
        listObserver.update();
        this.setVisible(true);
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        Panel = new JPanel();
        Panel.setLayout(new com.intellij.uiDesigner.core.GridLayoutManager(8, 4, new Insets(0, 0, 0, 0), -1, -1));
        final com.intellij.uiDesigner.core.Spacer spacer1 = new com.intellij.uiDesigner.core.Spacer();
        Panel.add(spacer1, new com.intellij.uiDesigner.core.GridConstraints(1, 3, 2, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, 1, null, new Dimension(20, 10), null, 0, false));
        previousMessages = new JTextPane();
        Panel.add(previousMessages, new com.intellij.uiDesigner.core.GridConstraints(1, 2, 3, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_BOTH, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(300, 400), null, 0, false));
        currentMessage = new JTextArea();
        currentMessage.setText("");
        Panel.add(currentMessage, new com.intellij.uiDesigner.core.GridConstraints(5, 2, 2, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(300, 50), null, 0, false));
        userlist = new JTextPane();
        userlist.setText("");
        Panel.add(userlist, new com.intellij.uiDesigner.core.GridConstraints(1, 1, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_BOTH, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(50, 100), null, 0, false));
        final com.intellij.uiDesigner.core.Spacer spacer2 = new com.intellij.uiDesigner.core.Spacer();
        Panel.add(spacer2, new com.intellij.uiDesigner.core.GridConstraints(1, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, 1, null, new Dimension(10, 10), null, 0, false));
        loginText = new JLabel();
        loginText.setText("Label");
        Panel.add(loginText, new com.intellij.uiDesigner.core.GridConstraints(6, 1, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        logoutButton = new JButton();
        logoutButton.setText("Button");
        Panel.add(logoutButton, new com.intellij.uiDesigner.core.GridConstraints(5, 1, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(40, 10), null, 0, false));
        final com.intellij.uiDesigner.core.Spacer spacer3 = new com.intellij.uiDesigner.core.Spacer();
        Panel.add(spacer3, new com.intellij.uiDesigner.core.GridConstraints(7, 1, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_VERTICAL, 1, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(10, 10), null, 0, false));
        final com.intellij.uiDesigner.core.Spacer spacer4 = new com.intellij.uiDesigner.core.Spacer();
        Panel.add(spacer4, new com.intellij.uiDesigner.core.GridConstraints(4, 1, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_VERTICAL, 1, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(10, 10), null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return Panel;
    }

    private class LogoutButton extends ClickButton {
        LogoutButton(JButton button) {
            super(button);
        }

        @Override
        public void notifySimpleObservers() {
            super.notifySimpleObservers();
            synchronized (loggedOutLock) {
                try {
                    while (!loggedOut) {
                        loggedOutLock.wait();
                        if (failedLoggedOut) {
                            failedLoggedOut = false;
                            return;
                        }
                    }
                } catch (InterruptedException e) {

                }
            }
            loggedIn = false;
            list.clear();
            ClientGUI.this.setVisible(false);
            fin.update();
        }

        void clearObservers() {
            Iterator<SimpleObserver> iterator = observers.listIterator(0);
            while (iterator.hasNext()) {
                iterator.next();
                iterator.remove();
            }
        }
    }

    private class ClickButton implements SimpleObservable {
        ArrayList<SimpleObserver> observers = new ArrayList<>();

        ClickButton(JButton button) {
            button.addActionListener((ActionEvent e) -> notifySimpleObservers());
        }

        @Override
        public void notifySimpleObservers() {
            for (SimpleObserver observer : observers) {
                observer.update();
            }
        }

        @Override
        public void removeSimpleObserver(SimpleObserver observer) {
            observers.remove(observer);
        }

        @Override
        public void addSimpleObserver(SimpleObserver observer) {
            observers.add(observer);
        }
    }


    private class Userlist {
        private JTextPane users;
        private StyledDocument document;
        private SimpleAttributeSet userAttributes = new SimpleAttributeSet();

        private LinkedList<User> list = new LinkedList<>();

        final private Object listLock = new Object();

        Userlist(JTextPane users) {
            users.addFocusListener(new FocusListener() {

                @Override
                public void focusLost(FocusEvent e) {
                    users.setEditable(true);

                }

                @Override
                public void focusGained(FocusEvent e) {
                    users.setEditable(false);

                }
            });
            this.users = users;
            document = users.getStyledDocument();
        }

        void getUser(String user, String type) {
            synchronized (listLock) {
                try {
                    Iterator<User> iterator = list.listIterator(0);
                    while (iterator.hasNext()) {
                        User cur = iterator.next();
                        if (cur.getType().equals(type) && cur.getName().equals(user)) {
                            return;
                        }
                    }
                    String text = user + " via " + type + "\n";
                    list.add(new User(user, type));
                    document.insertString(document.getLength(), text, userAttributes);
                } catch (BadLocationException e) {
                    e.printStackTrace();
                }
            }
        }

        void clear() {
            Iterator<User> iterator = list.listIterator(0);
            while (iterator.hasNext()) {
                iterator.next();
                iterator.remove();
            }
            users.setText("");
        }

        void getList(String mes) {
            synchronized (listLock) {
                Iterator<User> iterator = list.listIterator(0);
                while (iterator.hasNext()) {
                    iterator.next();
                    iterator.remove();
                }
                users.setText("");
                BufferedReader reader = new BufferedReader(new StringReader(mes));
                String line = "";
                while (line != null) {
                    try {
                        line = reader.readLine();
                        if (line != null) {
                            String user = line.substring(0, line.lastIndexOf("$"));
                            String type = line.substring(line.lastIndexOf("$") + 1);
                            getUser(user, type);
                        }
                    } catch (IOException e) {
                        e.printStackTrace();
                        return;
                    }
                }
            }
        }

        void removeUser(String removingUser) {
            synchronized (listLock) {
                try {
                    int length = 0;
                    Iterator<User> iterator = list.listIterator(0);
                    if (!iterator.hasNext()) {
                        return;
                    }
                    User user = iterator.next();
                    String userName = user.getName();
                    if (removingUser.equals(userName)) {
                        document.remove(length, userName.length() + user.getType().length() + 6);
                        iterator.remove();
                        return;
                    }
                    while (iterator.hasNext()) {
                        length += userName.length() + user.getType().length() + 6;
                        user = iterator.next();
                        userName = user.getName();
                        if (removingUser.equals(userName)) {
                            document.remove(length, userName.length() + user.getType().length() + 6);
                            iterator.remove();
                            break;
                        }
                    }

                } catch (BadLocationException e) {
                    e.printStackTrace();
                }
            }
        }
    }

    private class Messages {
        private StyledDocument document;
        private SimpleAttributeSet messageAttributes = new SimpleAttributeSet();
        private SimpleAttributeSet errorAttributes = new SimpleAttributeSet();

        private LimitedQueue<String> messagesQueue = new LimitedQueue<>(10);

        Messages(JTextPane messages) {
            messages.addFocusListener(new FocusListener() {

                @Override
                public void focusLost(FocusEvent e) {
                    messages.setEditable(true);

                }

                @Override
                public void focusGained(FocusEvent e) {
                    messages.setEditable(false);

                }
            });
            document = messages.getStyledDocument();
            StyleConstants.setForeground(errorAttributes, Color.RED);
        }

        void updateText(String mes) {
            try {
                String text = mes + "\n";
                String last = messagesQueue.preemptiveAdd(text);
                if (last != null) {
                    shrinkText(last.length());
                }
                document.insertString(document.getLength(), text, messageAttributes);
            } catch (BadLocationException e) {
                e.printStackTrace();
            }
        }

        void shrinkText(int length) {
            try {
                document.remove(0, length);
            } catch (BadLocationException e) {
                e.printStackTrace();
            }
        }

        void errorText(String mes) {
            try {
                String text = mes + "\n";
                String last = messagesQueue.preemptiveAdd(text);
                if (last != null) {
                    shrinkText(last.length());
                }
                document.insertString(document.getLength(), mes + "\n", errorAttributes);
            } catch (BadLocationException e) {
                e.printStackTrace();
            }
        }
    }

    @Override
    public void showSuccess() {
        if (sendedMessages.size() > 0) {
            try {
                messages.updateText(sendedMessages.take());
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
        } else {
            synchronized (loggedOutLock) {
                loggedOut = true;
                loggedOutLock.notifyAll();
            }
        }
    }

    @Override
    public void showMessage(String message, String sender) {
        messages.updateText(sender + ": " + message);
    }

    @Override
    public void showError(String error) {
        if (!loggedIn) {
            dialog.showError();
            return;
        }
        if (!listed) {
            listed = true;
            messages.errorText(error);
            return;
        }
        if (sendedMessages.size() > 0) {
            try {
                messages.errorText(sendedMessages.take() + "\n"
                        + error);
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
        } else {
            synchronized (loggedOutLock) {
                messages.errorText(error);
                failedLoggedOut = true;
                loggedOutLock.notifyAll();
            }
        }
    }

    void connectionError() {
        new ErrorDialog("Failed to connect with server");
    }

    @Override
    public void showList(String listString) {
        listed = true;
        list.getList(listString);
    }

    @Override
    public void showUserlogin(String user, String type) {
        list.getUser(user, type);
    }

    @Override
    public void showUserlogout(String user) {
        list.removeUser(user);
    }

    private class MessageForm implements Observable {
        MessageForm(JTextArea form) {
            this.form = form;
            form.setLineWrap(true);
            form.setWrapStyleWord(true);
            addAction(() -> {
                currentText = form.getText();
                sendedMessages.add("~: " + currentText);
                messageForm.form.setText("");
                messageForm.notifyObservers();
            });
        }

        private ArrayList<Observer> observers = new ArrayList<>();

        private JTextArea form;

        private String currentText;
        final static private String NEWLINE = "NEWLINE";
        final static private String NEWMESSAGE = "NEWMESSAGE";


        private void addAction(SimpleObserver listener) {
            InputMap input = form.getInputMap();
            KeyStroke enter = KeyStroke.getKeyStroke("ENTER");
            KeyStroke shiftEnter = KeyStroke.getKeyStroke("ctrl ENTER");
            input.put(shiftEnter, NEWLINE);
            input.put(enter, NEWMESSAGE);

            ActionMap actions = form.getActionMap();
            actions.put(NEWMESSAGE, new AbstractAction() {
                @Override
                public void actionPerformed(ActionEvent e) {
                    listener.update();
                }
            });
            actions.put(NEWLINE, new AbstractAction() {
                @Override
                public void actionPerformed(ActionEvent e) {
                    form.append("\n");
                }
            });
        }

        @Override
        public void removeObserver(Observer observer) {
            if (observers.contains(observer)) {
                observers.remove(observer);
            }
        }

        @Override
        public void addObserver(Observer observer) {
            observers.add(observer);
        }

        @Override
        public void notifyObservers() {
            for (Observer observer : observers) {
                observer.update(currentText);
            }
        }

        void clearObservers() {
            Iterator<Observer> iterator = observers.listIterator(0);
            while (iterator.hasNext()) {
                iterator.next();
                iterator.remove();
            }
        }
    }

    private class LimitedQueue<E> extends ArrayBlockingQueue<E> {
        LimitedQueue(int limit) {
            super(limit);
        }

        final private Object lock = new Object();

        E preemptiveAdd(E o) {
            synchronized (lock) {
                E out = null;
                if (remainingCapacity() == 0) {
                    out = super.remove();
                }
                super.add(o);
                return out;
            }
        }
    }
}
